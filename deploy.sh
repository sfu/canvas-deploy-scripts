#!/usr/bin/env bash

#
# Script for deploying a Canvas release to a Canvas application
# or management server
#
# Usage:
#  ./deploy.sh -r <release-name> [-f]
#
# Arguments:
#   <release-name>: typically generated by Bamboo, determines
#                   where the release will be installed
#

set -e
set -u
set -o pipefail

# Default options
FORCE=false
RELEASE_TARBALL=
CANVAS_ROOT=/var/rails/canvas/releases
CANVAS_ENV=
RELEASE=
INSTALL_DIR=
TARBALL=canvas.tar
ID=$(id -u canvasuser)
IS_PRIMARY_MANAGEMENT_NODE=false

usage () {
  echo "usage: $(basename "$0") -e <environment> -r <path> [-f]"
  echo -e "\nDeploys a Canvas release to an application or management server."
  echo -e "\nOptions:"
  echo -e "    -r <path>    The target installation path. Path must not already exist unless using -f"
  echo -e "    -f           Force installation to the target path. Target will be removed and replaced."
  echo -e "    -h           Show this help, then exit\n"
}

is_primary_managmeent_node() {
  # determine if a node is the primary managment node from its hostname
  # the primary node is the one with 01 in the hostname
  local short_node
  short_node=$(hostname -s | sed -e 's/lcp-canvas-//')
  local node_type=${short_node:0:1}
  local node_num=${short_node:2}
  if [ "$node_type" = "m" -a "$node_num" = "01" ]; then
    IS_PRIMARY_MANAGEMENT_NODE=true
  fi
}

run_on_primary_management_node() {
  if [ $IS_PRIMARY_MANAGEMENT_NODE = true ] ; then
    $1
  fi
}


getenv() {
  is_primary_managmeent_node

  # determine the environment from the hostname
  SHORTENV=$(hostname -s | sed -e 's/lcp-canvas-[am]//' | sed -e 's/[0-9]\+//')

  # determine the role from the hostname

  case "$SHORTENV" in
    p)
      CANVAS_ENV="production"
    ;;
    s)
      CANVAS_ENV="stage"
    ;;
    t)
      CANVAS_ENV="test"
    ;;
    *)
      echo "ERROR: could not determine Canvas environment from hostname. Are you running on a Canvas server?"
      exit 1
  esac
  RELEASE_TARBALL="/usr/local/canvas/deploy-release-$CANVAS_ENV/$RELEASE/$TARBALL"
}

preflight() {
  getenv
  # check if the release exists
  echo "Performing preflight checks"
  echo "Is the primary management node? $IS_PRIMARY_MANAGEMENT_NODE"
  printf "Release tarball exists (%s)? " "$RELEASE_TARBALL"
  if [ -f "/usr/local/canvas/deploy-release-$CANVAS_ENV/$RELEASE/canvas.tar" ]; then
    printf "yes\n"
  else
    printf "no\n"
    echo "Aborting - no release tarball."
    exit 1
  fi
  
  # check if release directory exists; bail if true && !FORCE
  printf "Release directory exists? "
  if [ -d "$CANVAS_ROOT"/"$RELEASE" ] ; then
    if [ "$FORCE" = false ] ; then
      printf "yes\n"
      echo "Aborting - release directory ($INSTALL_DIR) already exists"
      exit 1
    else
      printf "yes - but using force mode\n"
      printf "Removing previous release installation directory: "
      rm -rf $INSTALL_DIR
      printf "done\n"
    fi
  else
    printf "no\n"
  fi

  echo -e "Preflight checks complete, proceeding"
}

create_release_dir() {
  printf "Creating release directory (%s): " "$INSTALL_DIR"
  mkdir $INSTALL_DIR
  printf "done\n"
}

extract_release() {
  printf "Extracting release tarball to relase directory: "
  tar -xf $RELEASE_TARBALL -C $INSTALL_DIR --owner="$ID" --group="$ID"
  printf "done\n"
}

copy_config() {
  printf "Copying config files from templates: "
  sudo /usr/local/canvas/bin/canvasconfig -r $RELEASE
  printf "done\n"
}

symlink_canvas_data() {
  # Create a symlink to /mnt/data in the Canvas install directory
  printf "Symlinking /mnt/data: "
  mkdir -p $INSTALL_DIR/mnt/data
  ln -s /mnt/data/canvasfiles $INSTALL_DIR/mnt/data/canvasfiles
  printf "done\n"
}

# rebuild_brand_configs() {}

# symlink_brandable_css() {}

# cleanup_brandable_css() {}

# run_predeploy_migrations() {}

# run_migrations() {}

while getopts ':fhr:' OPTION ; do
  case "$OPTION" in
    f)
      FORCE=true
    ;;
    h)
      usage
      exit 0
    ;;
    r)
      if [ -z "$OPTARG" ] ; then
        usage
        exit 1
      fi
      RELEASE="$OPTARG"
      INSTALL_DIR="$CANVAS_ROOT"/"$RELEASE"
    ;;
    ?)
      usage
      exit 1
    ;;
  esac
done

if [ -z "$RELEASE" ] ; then
  usage
  exit 1
fi

# echo "Deploying Canvas release to $CANVAS_ROOT/$RELEASE"

preflight
create_release_dir
extract_release
copy_config
symlink_canvas_data

